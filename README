cs367-IEEE-floating-point-implementation

This project is my implementation of the representation of the IEEE Floating Point 
Numbers.  The main purpose of this project is to be able to read an input number 
(in the human-readable floating point form) encoded into the IEEE floating point 
format (13-bit long for this project), and store such encoded number in an integer 
by using only the last 13 bits out of the 32 bits that comprise the integer.

This is a school project for the Computer Systems and Programming (CS367) at GMU.  
Several files where provided before hand in order to get started with this project. 
What was required from me was to implement the functions that would be called when 
an addition or multiplication of two floating point numbers was required.  

The following is the explanation of what was provided by the course's professor as 
the foundation for this project:


"This tar file contains the following files:
   * fp.h  - header file with the 'representation' (# exponent & fraction bits)
   * fp_functs.c - function stubs that you will code
   * Makefile
   * Files to build the driver: fp.l fp_program.c fpParse.h test_pgm.o
   * output_all_values.c - Simple program to output all of the floats that
          are representatable with the given number of bits.  This program
          will be useful when you are trying to determine if your program
          is working correctly.
   * Single sample program - you can write others or enter programs on
        the command line

Once you type 'make', you will also have:
   * fp - executable for your program
   * all_values - executable assocaited with output_all_values
   * various .o files that you can ignore

The only file you should be modifying is fp_functs.c"
